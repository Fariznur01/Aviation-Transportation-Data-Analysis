# -*- coding: utf-8 -*-
"""TransportasiPesawat.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1M_vjkIb11q6qJdPUJcxcnzZ4OTct3qDK

# Tujuan

*   Status Flight(Perbandingan cancel, delay dan on time)
*   Month Status Flight(Top Negara tujuan cancel, delay dan on time)
*   Airport(Top 5 Bandara paling cancel, delay dan on time)
*   Country(Top 5 Negara paling cancel, delay dan on time)

# Ket Kolom Dataset

Link : https://www.kaggle.com/datasets/iamsouravbanerjee/airline-dataset/data

Dataset Glossary (Column-wise)
Passenger ID - Unique identifier for each passenger
First Name - First name of the passenger
Last Name - Last name of the passenger
Gender - Gender of the passenger
Age - Age of the passenger
Nationality - Nationality of the passenger
Airport Name - Name of the airport where the passenger boarded
Airport Country Code - Country code of the airport's location
Country Name - Name of the country the airport is located in
Airport Continent - Continent where the airport is situated
Continents - Continents involved in the flight route
Departure Date - Date when the flight departed
Arrival Airport - Destination airport of the flight
Pilot Name - Name of the pilot operating the flight
Flight Status - Current status of the flight (e.g., on-time, delayed, canceled)

Glosarium Kumpulan Data (berdasarkan Kolom)
ID Penumpang - Pengidentifikasi unik untuk setiap penumpang
Nama Depan - Nama depan penumpang
Nama Belakang - Nama belakang penumpang
Jenis Kelamin - Jenis kelamin penumpang
Usia - Usia penumpang
Kebangsaan - Kebangsaan penumpang
Nama Bandara - Nama bandara tempat penumpang menaiki pesawat
Kode Negara Bandara - Kode negara lokasi bandara
Nama Negara - Nama negara tempat bandara berada
Benua Bandara - Benua tempat bandara berada
Benua - Benua yang terlibat dalam jalur penerbangan
Tanggal Keberangkatan - Tanggal keberangkatan penerbangan
Bandara Kedatangan - Bandara tujuan penerbangan
Nama Pilot - Nama pilot yang mengoperasikan penerbangan
Status Penerbangan - Status penerbangan saat ini (misalnya, tepat waktu, tertunda, dibatalkan)

# Akses data
"""

from google.colab import drive
import pandas as pd

# Mount Google Drive
drive.mount('/content/drive')

# Path ke file CSV di Google Drive
path = '/content/drive/MyDrive/Database/Data_Transportasi_Pesawat/dfAirline.csv'

# Membaca file CSV
data = pd.read_csv(path)

# Menampilkan beberapa baris pertama dari data
print(data.head())

"""# Data Wrangling

# Akses Data Kolom
"""

# Membaca file CSV
data = pd.read_csv(path)

# Menampilkan beberapa baris pertama dari data
print(data.columns)

"""# Akses Data Baris"""

# Akses baris pertama
baris_pertama = data.iloc[0]

# Menampilkan baris pertama
print(baris_pertama)

"""# Tipe Data"""

data.dtypes

# Konversi kolom 'Tanggal' menjadi tipe data tanggal
data['Departure Date'] = pd.to_datetime(data['Departure Date'])

print(data.dtypes)
data

"""# Cek Data kosong"""

# Menggunakan isna()
missing_values = data.isna()

# Menggunakan isnull() (sama dengan isna())
missing_values = data.isnull()

# Menampilkan jumlah nilai yang hilang per kolom
print(missing_values.sum())

"""#  Eksplorasi Data (Data Exploration)

# Visual Data

# Flight Status
"""

# Menampilkan nilai unik dalam kolom
status = data['Flight Status'].unique()

print(status)

# Konversi kolom 'Departure Date' ke tipe data tanggal
data['Departure Date'] = pd.to_datetime(data['Departure Date'])

# Ekstrak tahun dari tanggal keberangkatan
unique_years = data['Departure Date'].dt.year.unique()

# Tampilkan nilai unik tahun
print("Tahun unik pada kolom 'Departure Date':")
print(unique_years)

# Konversi kolom 'Departure Date' ke tipe data tanggal
data['Departure Date'] = pd.to_datetime(data['Departure Date'])

# Ekstrak tahun dari tanggal keberangkatan
unique_years = data['Departure Date'].dt.month.unique()

# Tampilkan nilai unik tahun
print("Tahun unik pada kolom 'Departure Date':")
print(unique_years)

jumlah_data = data.shape[0]  # Mendapatkan jumlah baris dari DataFrame
print("Jumlah data dalam data:", jumlah_data)

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Menghitung jumlah penumpang per tahun
data['Departure Date'] = pd.to_datetime(data['Departure Date'])
data['Year'] = data['Departure Date'].dt.year
passengers_per_year = data.groupby('Year').size()

# Membuat plot
plt.figure(figsize=(10, 6))
bar_plot = sns.barplot(x=passengers_per_year.index, y=passengers_per_year.values)
plt.title('Jumlah Penumpang  Tahun')
plt.xlabel('Tahun Keberangkatan')
plt.ylabel('Jumlah Penumpang')

# Menambahkan informasi detail di atas setiap batang
for index, value in enumerate(passengers_per_year.values):
    bar_plot.text(index, value + 50, str(value), color='black', ha="center")

plt.xticks(rotation=45)
plt.show()

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Memisahkan data berdasarkan status penerbangan
on_time = data[data['Flight Status'] == 'On Time']
delayed = data[data['Flight Status'] == 'Delayed']
cancelled = data[data['Flight Status'] == 'Cancelled']

# Menghitung jumlah setiap status penerbangan
on_time_counts = on_time['Flight Status'].count()
delayed_counts = delayed['Flight Status'].count()
cancelled_counts = cancelled['Flight Status'].count()

# Menyimpan jumlah ke dalam sebuah DataFrame
counts_df = pd.DataFrame({
    'Status': ['On Time', 'Delayed', 'Cancelled'],
    'Jumlah': [on_time_counts, delayed_counts, cancelled_counts]
})

# Mengurutkan DataFrame berdasarkan kolom 'Jumlah' secara menurun
counts_df = counts_df.sort_values('Jumlah', ascending=False)

# Membuat plot dengan palet warna yang berbeda
colors = ['red', 'green', 'yellow']

plt.figure(figsize=(8, 6))
bars = sns.barplot(x='Status', y='Jumlah', data=counts_df, order=counts_df['Status'], palette=colors)
plt.title('Jumlah Penerbangan berdasarkan Status')
plt.xlabel('Status Penerbangan')
plt.ylabel('Jumlah')

# Menambahkan label jumlah di atas setiap batang
for bar in bars.patches:
    plt.text(bar.get_x() + bar.get_width() / 2, bar.get_height() + 0.05,
             f'{bar.get_height():.0f}', ha='center', va='bottom')

plt.show()

import pandas as pd
import matplotlib.pyplot as plt

# Menghitung jumlah setiap status penerbangan
status_counts = data['Flight Status'].value_counts()

# Membuat daftar warna sesuai dengan setiap status
colors = ['red', 'green', 'yellow']

# Membuat diagram lingkaran dengan warna khusus untuk setiap kategori
plt.figure(figsize=(8, 6))
plt.pie(status_counts, labels=status_counts.index, autopct='%1.1f%%', startangle=140, colors=colors)
plt.axis('equal')
plt.title('Proporsi Status Penerbangan')
plt.show()

import pandas as pd
import matplotlib.pyplot as plt

# Ubah kolom 'Departure Date' ke dalam format datetime
data['Departure Date'] = pd.to_datetime(data['Departure Date'])

# Buat kolom baru 'Departure Month' untuk menampung bulan dari tanggal keberangkatan
data['Departure Month'] = data['Departure Date'].dt.month_name()

# Filter data hanya untuk status 'Cancelled'
on_time_data = data[data['Flight Status'] == 'Cancelled']

# Hitung jumlah penerbangan 'Cancelled' berdasarkan bulan
on_time_counts = on_time_data['Departure Month'].value_counts().sort_index()

# Tentukan urutan bulan secara khusus
month_order = [
    'January', 'February', 'March', 'April', 'May', 'June',
    'July', 'August', 'September', 'October', 'November', 'December'
]

# Menggunakan urutan bulan yang telah ditentukan
on_time_counts = on_time_counts.reindex(month_order, fill_value=0)

# Membuat plot bar untuk jumlah penerbangan 'Cancelled' berdasarkan bulan dengan urutan yang telah ditentukan
plt.figure(figsize=(10, 6))
bars = plt.bar(on_time_counts.index, on_time_counts, color='red')
plt.title('Jumlah Penerbangan Cancelled per Bulan')
plt.xlabel('Bulan')
plt.ylabel('Jumlah Penerbangan Cancelled')
plt.xticks(rotation=45)
plt.tight_layout()

# Menambahkan label nilai total di atas setiap batang
for bar in bars:
    yval = bar.get_height()
    plt.text(bar.get_x() + bar.get_width() / 2, yval, yval, ha='center', va='bottom')

plt.show()

import pandas as pd
import matplotlib.pyplot as plt

# Ubah kolom 'Departure Date' ke dalam format datetime
data['Departure Date'] = pd.to_datetime(data['Departure Date'])

# Buat kolom baru 'Departure Month' untuk menampung bulan dari tanggal keberangkatan
data['Departure Month'] = data['Departure Date'].dt.month_name()

# Filter data hanya untuk status 'On Time'
on_time_data = data[data['Flight Status'] == 'On Time']

# Hitung jumlah penerbangan 'On Time' berdasarkan bulan
on_time_counts = on_time_data['Departure Month'].value_counts().sort_index()

# Tentukan urutan bulan secara khusus
month_order = [
    'January', 'February', 'March', 'April', 'May', 'June',
    'July', 'August', 'September', 'October', 'November', 'December'
]

# Menggunakan urutan bulan yang telah ditentukan
on_time_counts = on_time_counts.reindex(month_order, fill_value=0)

# Membuat plot bar untuk jumlah penerbangan 'On Time' berdasarkan bulan dengan urutan yang telah ditentukan
plt.figure(figsize=(10, 6))
bars = plt.bar(on_time_counts.index, on_time_counts, color='green')
plt.title('Jumlah Penerbangan On Time per Bulan')
plt.xlabel('Bulan')
plt.ylabel('Jumlah Penerbangan On Time')
plt.xticks(rotation=45)
plt.tight_layout()

# Menambahkan label nilai total di atas setiap batang
for bar in bars:
    yval = bar.get_height()
    plt.text(bar.get_x() + bar.get_width() / 2, yval, yval, ha='center', va='bottom')

plt.show()

import pandas as pd
import matplotlib.pyplot as plt

# Ubah kolom 'Departure Date' ke dalam format datetime
data['Departure Date'] = pd.to_datetime(data['Departure Date'])

# Buat kolom baru 'Departure Month' untuk menampung bulan dari tanggal keberangkatan
data['Departure Month'] = data['Departure Date'].dt.month_name()

# Filter data hanya untuk status 'Delayed'
delayed_data = data[data['Flight Status'] == 'Delayed']

# Hitung jumlah penerbangan 'Delayed' berdasarkan bulan
delayed_counts = delayed_data['Departure Month'].value_counts().sort_index()

# Tentukan urutan bulan secara khusus
month_order = [
    'January', 'February', 'March', 'April', 'May', 'June',
    'July', 'August', 'September', 'October', 'November', 'December'
]

# Menggunakan urutan bulan yang telah ditentukan
delayed_counts = delayed_counts.reindex(month_order, fill_value=0)

# Membuat plot bar untuk jumlah penerbangan 'Delayed' berdasarkan bulan dengan urutan yang telah ditentukan
plt.figure(figsize=(10, 6))
bars = plt.bar(delayed_counts.index, delayed_counts, color='yellow')
plt.title('Jumlah Penerbangan Delayed per Bulan')
plt.xlabel('Bulan')
plt.ylabel('Jumlah Penerbangan Delayed')
plt.xticks(rotation=45)
plt.tight_layout()

# Menambahkan label nilai total di atas setiap batang
for bar in bars:
    yval = bar.get_height()
    plt.text(bar.get_x() + bar.get_width() / 2, yval, yval, ha='center', va='bottom')

plt.show()

import pandas as pd
import matplotlib.pyplot as plt


# Ubah kolom 'Departure Date' ke dalam format datetime
data['Departure Date'] = pd.to_datetime(data['Departure Date'])

# Buat kolom baru 'Departure Month' untuk menampung bulan dari tanggal keberangkatan
data['Departure Month'] = data['Departure Date'].dt.month_name()

# Filter data hanya untuk status 'Cancelled'
cancelled_data = data[data['Flight Status'] == 'Cancelled']

# Hitung jumlah penerbangan 'Cancelled' berdasarkan bulan
cancelled_counts = cancelled_data['Departure Month'].value_counts().sort_index()

# Tentukan urutan bulan secara khusus
month_order = [
    'January', 'February', 'March', 'April', 'May', 'June',
    'July', 'August', 'September', 'October', 'November', 'December'
]

# Menggunakan urutan bulan yang telah ditentukan
cancelled_counts = cancelled_counts.reindex(month_order, fill_value=0)

# Membuat plot bar untuk jumlah penerbangan 'Cancelled' berdasarkan bulan dengan urutan yang telah ditentukan
plt.figure(figsize=(10, 6))
bars = plt.bar(cancelled_counts.index, cancelled_counts, color='skyblue')
plt.title('Jumlah Penerbangan Cancelled per Bulan')
plt.xlabel('Bulan')
plt.ylabel('Jumlah Penerbangan Cancelled')
plt.xticks(rotation=45)
plt.tight_layout()

# Menambahkan label nilai total di atas setiap batang
for bar in bars:
    yval = bar.get_height()
    plt.text(bar.get_x() + bar.get_width() / 2, yval, yval, ha='center', va='bottom')

# Mendapatkan bulan dengan jumlah penerbangan terbanyak dan terendah
max_month = cancelled_counts.idxmax()
min_month = cancelled_counts.idxmin()

# Menampilkan bulan dengan jumlah penerbangan terbanyak dan terendah
plt.axvline(x=max_month, color='red', linestyle='--', label=f'Max ({max_month})', ymax=0.95)
plt.axvline(x=min_month, color='green', linestyle='--', label=f'Min ({min_month})', ymax=0.95)
plt.legend()
plt.show()

import pandas as pd
import matplotlib.pyplot as plt

# Ubah kolom 'Departure Date' ke dalam format datetime
data['Departure Date'] = pd.to_datetime(data['Departure Date'])

# Buat kolom baru 'Departure Month' untuk menampung bulan dari tanggal keberangkatan
data['Departure Month'] = data['Departure Date'].dt.month_name()

# Filter data hanya untuk status 'On Time'
on_time_data = data[data['Flight Status'] == 'On Time']

# Hitung jumlah penerbangan 'On Time' berdasarkan bulan
on_time_counts = on_time_data['Departure Month'].value_counts().sort_index()

# Tentukan urutan bulan secara khusus
month_order = [
    'January', 'February', 'March', 'April', 'May', 'June',
    'July', 'August', 'September', 'October', 'November', 'December'
]

# Menggunakan urutan bulan yang telah ditentukan
on_time_counts = on_time_counts.reindex(month_order, fill_value=0)

# Membuat plot bar untuk jumlah penerbangan 'On Time' berdasarkan bulan dengan urutan yang telah ditentukan
plt.figure(figsize=(10, 6))
bars = plt.bar(on_time_counts.index, on_time_counts, color='skyblue')
plt.title('Jumlah Penerbangan On Time per Bulan')
plt.xlabel('Bulan')
plt.ylabel('Jumlah Penerbangan On Time')
plt.xticks(rotation=45)
plt.tight_layout()

# Menambahkan label nilai total di atas setiap batang
for bar in bars:
    yval = bar.get_height()
    plt.text(bar.get_x() + bar.get_width() / 2, yval, yval, ha='center', va='bottom')

# Mendapatkan bulan dengan jumlah penerbangan terbanyak dan terendah untuk 'On Time'
max_month = on_time_counts.idxmax()
min_month = on_time_counts.idxmin()

# Menampilkan bulan dengan jumlah penerbangan terbanyak dan terendah untuk 'On Time'
plt.axvline(x=max_month, color='red', linestyle='--', label=f'Max ({max_month})', ymax=0.95)
plt.axvline(x=min_month, color='green', linestyle='--', label=f'Min ({min_month})', ymax=0.95)
plt.legend()
plt.show()

import pandas as pd
import matplotlib.pyplot as plt

# Ubah kolom 'Departure Date' ke dalam format datetime
data['Departure Date'] = pd.to_datetime(data['Departure Date'])

# Buat kolom baru 'Departure Month' untuk menampung bulan dari tanggal keberangkatan
data['Departure Month'] = data['Departure Date'].dt.month_name()

# Filter data hanya untuk status 'Delayed'
delayed_data = data[data['Flight Status'] == 'Delayed']

# Hitung jumlah penerbangan 'Delayed' berdasarkan bulan
delayed_counts = delayed_data['Departure Month'].value_counts().sort_index()

# Tentukan urutan bulan secara khusus
month_order = [
    'January', 'February', 'March', 'April', 'May', 'June',
    'July', 'August', 'September', 'October', 'November', 'December'
]

# Menggunakan urutan bulan yang telah ditentukan
delayed_counts = delayed_counts.reindex(month_order, fill_value=0)

# Membuat plot bar untuk jumlah penerbangan 'Delayed' berdasarkan bulan dengan urutan yang telah ditentukan
plt.figure(figsize=(10, 6))
bars = plt.bar(delayed_counts.index, delayed_counts, color='skyblue')
plt.title('Jumlah Penerbangan Delayed per Bulan')
plt.xlabel('Bulan')
plt.ylabel('Jumlah Penerbangan Delayed')
plt.xticks(rotation=45)
plt.tight_layout()

# Menambahkan label nilai total di atas setiap batang
for bar in bars:
    yval = bar.get_height()
    plt.text(bar.get_x() + bar.get_width() / 2, yval, yval, ha='center', va='bottom')

# Mendapatkan bulan dengan jumlah penerbangan terbanyak dan terendah untuk 'Delayed'
max_month = delayed_counts.idxmax()
min_month = delayed_counts.idxmin()

# Menampilkan bulan dengan jumlah penerbangan terbanyak dan terendah untuk 'Delayed'
plt.axvline(x=max_month, color='red', linestyle='--', label=f'Max ({max_month})', ymax=0.95)
plt.axvline(x=min_month, color='green', linestyle='--', label=f'Min ({min_month})', ymax=0.95)
plt.legend()
plt.show()

"""# Month Status Flight"""

import pandas as pd


# Dapat menggunakan metode unique() untuk mendapatkan nilai unik dari kolom tersebut
unique_airports = data['Arrival Airport'].unique()

# Untuk mendapatkan jumlah nilai unik
num_unique_airports = len(unique_airports)

# Untuk mendapatkan daftar nama-nama unik yang ada di kolom 'Arrival Airport'
unique_airport_names = list(unique_airports)

# Menampilkan nilai unik dan jumlahnya
print("Jumlah nilai unik bandara tujuan:", num_unique_airports)
print("Nama-nama unik dari Arrival Airport:", unique_airport_names)

import pandas as pd

# Gunakan metode unique() untuk mendapatkan nilai unik dari kolom tersebut
unique_countries = data['Country Name'].unique()

# Untuk mendapatkan jumlah nilai unik
num_unique_countries = len(unique_countries)

# Untuk mendapatkan daftar nama-nama unik yang ada di kolom 'Country Name'
unique_country_names = list(unique_countries)

# Menampilkan nilai unik dan jumlahnya
print("Jumlah nilai unik:", num_unique_countries)
print("Nama-nama unik dari Country Name:", unique_country_names)

import pandas as pd

# Daftar negara yang valid
valid_countries = [
    'Afghanistan', 'Albania', 'Algeria', 'Andorra', 'Angola', 'Antigua and Barbuda', 'Argentina', 'Armenia', 'Australia', 'Austria', 'Azerbaijan', 'Bahamas', 'Bahrain', 'Bangladesh', 'Barbados', 'Belarus',
    'Belgium', 'Belize', 'Benin', 'Bhutan', 'Bolivia', 'Bosnia and Herzegovina', 'Botswana', 'Brazil', 'Brunei Darussalam',
    'Bulgaria', 'Burkina Faso', 'Burundi', 'Cambodia', 'Cameroon', 'Canada', 'Cabo Verde',
    'Central African Republic', 'Chad', 'Chile', 'China', 'Colombia', 'Comoros', 'Congo', 'Costa Rica',
    'Cote Ivoire', 'Croatia', 'Cuba', 'Curacao', 'Cyprus', 'Czechia', 'Denmark', 'Djibouti', 'Dominica',
    'Dominican Republic', 'Ecuador', 'Egypt', 'El Salvador', 'Equatorial Guinea', 'Eritrea',
    'Estonia', 'Ethiopia', 'Fiji', 'Finland', 'France', 'Gabon', 'Gambia', 'Georgia', 'Germany', 'Ghana',
    'Greece', 'Grenada', 'Guatemala', 'Guinea', 'Guinea-Bissau', 'Guyana', 'Haiti', 'Honduras', 'Hungary',
    'Iceland', 'India', 'Indonesia', 'Iran', 'Iraq', 'Ireland', 'Israel', 'Italy',
    'Jamaica', 'Japan', 'Jordan', 'Kazakhstan', 'Kenya', 'Kiribati',
    'Kuwait', 'Kyrgyzstan', 'Laos', 'Latvia', 'Lebanon', 'Lesotho', 'Liberia', 'Libya', 'Liechtenstein',
    'Lithuania', 'Luxembourg', 'Madagascar', 'Malawi', 'Malaysia', 'Maldives', 'Mali',
    'Malta', 'Marshall Islands','Myanmar', 'Mauritania', 'Mauritius', 'Mexico', 'Micronesia', 'Moldova', 'Monaco',
    'Mongolia', 'Montenegro', 'Morocco', 'Mozambique', 'Namibia', 'Nauru', 'Nepal', 'Netherlands', 'New Zealand',
    'Nicaragua', 'Niger', 'Nigeria', 'North Korea','North Macedonia', 'Norway', 'Oman', 'Pakistan', 'Palau',
    'Palestinian Territories', 'Panama', 'Papua New Guinea', 'Paraguay', 'Peru', 'Philippines', 'Poland',
    'Portugal', 'Qatar', 'Romania', 'Russian Federation', 'Rwanda', 'Saint Kitts and Nevis', 'Saint Lucia',
    'Saint Vincent and the Grenadines', 'Samoa', 'San Marino', 'Sao Tome and Principe', 'Saudi Arabia', 'Senegal',
    'Serbia', 'Seychelles', 'Sierra Leone', 'Singapore', 'Slovakia', 'Slovenia', 'Solomon Islands',
    'Somalia', 'South Africa', 'South Korea', 'South Sudan', 'Spain', 'Sri Lanka', 'Sudan', 'Suriname',
    'Swaziland', 'Sweden', 'Switzerland', 'Syria', 'Taiwan', 'Tajikistan', 'Tanzania', 'Thailand',
    'Timor-Leste', 'Togo', 'Tonga', 'Trinidad and Tobago', 'Tunisia', 'Turkey', 'Turkmenistan', 'Tuvalu', 'Uganda', 'Ukraine',
    'United Arab Emirates','United States', 'United Kingdom', 'Uruguay', 'Uzbekistan', 'Vanuatu',
    'Venezuela', 'Vietnam', 'Yemen',
    'Zambia', 'Zimbabwe'
]

# Filter nilai unik di kolom 'Country Name' yang sesuai dengan daftar negara valid
filtered_countries = data['Country Name'].isin(valid_countries)

# Filter nilai unik di kolom 'Country Name' yang tidak sesuai dengan daftar negara valid
invalid_countries = data[~data['Country Name'].isin(valid_countries)]['Country Name'].unique()
invalid_country_data = data[filtered_countries]

# Untuk mendapatkan nilai unik yang telah difilter
unique_invalid_countries = invalid_country_data['Country Name'].unique()

# Mengurutkan nilai unik secara alfabetis
unique_invalid_countries = sorted(invalid_countries)

# Menampilkan nilai unik yang sudah difilter dan diurutkan alfabetis
print("Nilai unik dari Country Name yang sesuai dengan daftar negara tidak valid:")
print(unique_invalid_countries )

# Menghitung total negara yang tidak valid
total_invalid_countries = len(invalid_countries)
print("Total negara yang tidak valid:", total_invalid_countries)

valid_country_data = data[filtered_countries]

# Untuk mendapatkan nilai unik yang telah difilter
unique_valid_countries = valid_country_data['Country Name'].unique()

# Mengurutkan nilai unik secara alfabetis
unique_valid_countries = sorted(unique_valid_countries)

# Menampilkan nilai unik yang sudah difilter dan diurutkan alfabetis
print("Nilai unik dari Country Name yang sesuai dengan daftar negara valid:")
print(unique_valid_countries)

# Menghitung total negara yang valid
total_valid_countries = len(valid_countries)
print("Total negara yang valid:", total_valid_countries)

data['Country Name'].replace('Turks and Caicos Islands', 'Turkey', inplace=True)
data['Country Name'].replace('Virgin Islands, U.S.', 'United States', inplace=True)
data['Country Name'].replace('American Samoa', 'United States', inplace=True)
data['Country Name'].replace('United States Minor Outlying Islands', 'United States', inplace=True)
data['Country Name'].replace('Virgin Islands, U.S.', 'United States', inplace=True)
data['Country Name'].replace('Puerto Rico', 'United States', inplace=True)
data['Country Name'].replace('Guam', 'United States', inplace=True)
data['Country Name'].replace('Bolivia', 'Bolivia', inplace=True)
data['Country Name'].replace('Bolivia, Plurinational State of', 'Bolivia', inplace=True)
data['Country Name'].replace('Congo, The Democratic Republic of the', 'Congo', inplace=True)
data['Country Name'].replace('Côte d\'Ivoire', 'Cote Ivoire', inplace=True)
data['Country Name'].replace('Plurinational State of', 'Bolivia', inplace=True)
data['Country Name'].replace('Cocos (Keeling) Islands', 'Australia', inplace=True)
data['Country Name'].replace('Norfolk Island', 'Australia', inplace=True)
data['Country Name'].replace('French Guiana', 'France', inplace=True)
data['Country Name'].replace('French Polynesia', 'France', inplace=True)
data['Country Name'].replace('Guadeloupe', 'France', inplace=True)
data['Country Name'].replace('Martinique', 'France', inplace=True)
data['Country Name'].replace('Saint Barthélemy', 'France', inplace=True)
data['Country Name'].replace('Wallis and Futuna', 'France', inplace=True)
data['Country Name'].replace('Saint Pierre and Miquelon', 'France', inplace=True)
data['Country Name'].replace('Saint Martin (French part)', 'France', inplace=True)
data['Country Name'].replace('New Caledonia', 'France', inplace=True)
data['Country Name'].replace('Réunion', 'France', inplace=True)
data['Country Name'].replace('Mayotte', 'France', inplace=True)
data['Country Name'].replace('Gibraltar', 'United Kingdom', inplace=True)
data['Country Name'].replace('Montserrat', 'United Kingdom', inplace=True)
data['Country Name'].replace('Virgin Islands, British', 'United Kingdom', inplace=True)
data['Country Name'].replace('Greenland', 'Denmark', inplace=True)
data['Country Name'].replace('Iran, Islamic Republic of', 'Iran', inplace=True)
data['Country Name'].replace('Korea, Democratic People\'s Republic of', 'North Korea', inplace=True)
data['Country Name'].replace('Korea, Republic of', 'South Korea', inplace=True)
data['Country Name'].replace('Lao People\'s Democratic Republic', 'Laos', inplace=True)
data['Country Name'].replace('Macao', 'China', inplace=True)
data['Country Name'].replace('Hong Kong', 'China', inplace=True)
data['Country Name'].replace('Moldova, Republic of', 'Moldova', inplace=True)
data['Country Name'].replace('Palestine, State of', 'Palestinian Territories', inplace=True)
data['Country Name'].replace('Palestine', 'Palestinian Territories', inplace=True)
data['Country Name'].replace('Sint Maarten (Dutch part)', 'Netherlands', inplace=True)
data['Country Name'].replace('Syrian Arab Republic', 'Syria', inplace=True)
data['Country Name'].replace('Taiwan, Province of China', 'Taiwan', inplace=True)
data['Country Name'].replace('Viet Nam', 'Vietnam', inplace=True)
data['Country Name'].replace('Tanzania, United Republic of', 'Tanzania', inplace=True)

import pandas as pd

# Daftar negara yang valid
valid_countries = [
    'Afghanistan', 'Albania', 'Algeria', 'Andorra', 'Angola', 'Antigua and Barbuda', 'Argentina', 'Armenia', 'Australia', 'Austria', 'Azerbaijan', 'Bahamas', 'Bahrain', 'Bangladesh', 'Barbados', 'Belarus',
    'Belgium', 'Belize', 'Benin', 'Bhutan', 'Bolivia', 'Bosnia and Herzegovina', 'Botswana', 'Brazil', 'Brunei Darussalam',
    'Bulgaria', 'Burkina Faso', 'Burundi', 'Cambodia', 'Cameroon', 'Canada', 'Cabo Verde',
    'Central African Republic', 'Chad', 'Chile', 'China', 'Colombia', 'Comoros', 'Congo', 'Costa Rica',
    'Cote Ivoire', 'Croatia', 'Cuba', 'Curacao', 'Cyprus', 'Czechia', 'Denmark', 'Djibouti', 'Dominica',
    'Dominican Republic', 'Ecuador', 'Egypt', 'El Salvador', 'Equatorial Guinea', 'Eritrea',
    'Estonia', 'Ethiopia', 'Fiji', 'Finland', 'France', 'Gabon', 'Gambia', 'Georgia', 'Germany', 'Ghana',
    'Greece', 'Grenada', 'Guatemala', 'Guinea', 'Guinea-Bissau', 'Guyana', 'Haiti', 'Honduras', 'Hungary',
    'Iceland', 'India', 'Indonesia', 'Iran', 'Iraq', 'Ireland', 'Israel', 'Italy',
    'Jamaica', 'Japan', 'Jordan', 'Kazakhstan', 'Kenya', 'Kiribati',
    'Kuwait', 'Kyrgyzstan', 'Laos', 'Latvia', 'Lebanon', 'Lesotho', 'Liberia', 'Libya', 'Liechtenstein',
    'Lithuania', 'Luxembourg', 'Madagascar', 'Malawi', 'Malaysia', 'Maldives', 'Mali',
    'Malta', 'Marshall Islands','Myanmar', 'Mauritania', 'Mauritius', 'Mexico', 'Micronesia', 'Moldova', 'Monaco',
    'Mongolia', 'Montenegro', 'Morocco', 'Mozambique', 'Namibia', 'Nauru', 'Nepal', 'Netherlands', 'New Zealand',
    'Nicaragua', 'Niger', 'Nigeria', 'North Korea','North Macedonia', 'Norway', 'Oman', 'Pakistan', 'Palau',
    'Palestinian Territories', 'Panama', 'Papua New Guinea', 'Paraguay', 'Peru', 'Philippines', 'Poland',
    'Portugal', 'Qatar', 'Romania', 'Russian Federation', 'Rwanda', 'Saint Kitts and Nevis', 'Saint Lucia',
    'Saint Vincent and the Grenadines', 'Samoa', 'San Marino', 'Sao Tome and Principe', 'Saudi Arabia', 'Senegal',
    'Serbia', 'Seychelles', 'Sierra Leone', 'Singapore', 'Slovakia', 'Slovenia', 'Solomon Islands',
    'Somalia', 'South Africa', 'South Korea', 'South Sudan', 'Spain', 'Sri Lanka', 'Sudan', 'Suriname',
    'Swaziland', 'Sweden', 'Switzerland', 'Syria', 'Taiwan', 'Tajikistan', 'Tanzania', 'Thailand',
    'Timor-Leste', 'Togo', 'Tonga', 'Trinidad and Tobago', 'Tunisia', 'Turkey', 'Turkmenistan', 'Tuvalu', 'Uganda', 'Ukraine',
    'United Arab Emirates','United States', 'United Kingdom', 'Uruguay', 'Uzbekistan', 'Vanuatu',
    'Venezuela', 'Vietnam', 'Yemen',
    'Zambia', 'Zimbabwe'
]

# Filter nilai unik di kolom 'Country Name' yang sesuai dengan daftar negara valid
filtered_countries = data['Country Name'].isin(valid_countries)

# Filter nilai unik di kolom 'Country Name' yang tidak sesuai dengan daftar negara valid
invalid_countries = data[~data['Country Name'].isin(valid_countries)]['Country Name'].unique()
invalid_country_data = data[filtered_countries]

# Untuk mendapatkan nilai unik yang telah difilter
unique_invalid_countries = invalid_country_data['Country Name'].unique()

# Mengurutkan nilai unik secara alfabetis
unique_invalid_countries = sorted(invalid_countries)

# Menampilkan nilai unik yang sudah difilter dan diurutkan alfabetis
print("Nilai unik dari Country Name yang sesuai dengan daftar negara tidak valid:")
print(unique_invalid_countries )

# Menghitung total negara yang tidak valid
total_invalid_countries = len(invalid_countries)
print("Total negara yang tidak valid:", total_invalid_countries)

valid_country_data = data[filtered_countries]

# Untuk mendapatkan nilai unik yang telah difilter
unique_valid_countries = valid_country_data['Country Name'].unique()

# Mengurutkan nilai unik secara alfabetis
unique_valid_countries = sorted(unique_valid_countries)

# Menampilkan nilai unik yang sudah difilter dan diurutkan alfabetis
print("Nilai unik dari Country Name yang sesuai dengan daftar negara valid:")
print(unique_valid_countries)

# Menghitung total negara yang valid
total_valid_countries = len(valid_countries)
print("Total negara yang valid:", total_valid_countries)

data2 = data[filtered_countries].copy()
data2

import pandas as pd

# Menghitung jumlah penumpang per tahun tanpa plot
data['Departure Date'] = pd.to_datetime(data['Departure Date'])
data['Year'] = data['Departure Date'].dt.year
passengers_per_year = data.groupby('Year').size()

print(passengers_per_year)

print("Setelah Update Country")
data2['Departure Date'] = pd.to_datetime(data2['Departure Date'])
data2['Year'] = data2['Departure Date'].dt.year
passengers_per_year = data2.groupby('Year').size()

print(passengers_per_year)

"""Top Cancel 2022 =Agustus
Top On Time 2022 = Agustus
Top Delayed 2022 = Januari
"""

import pandas as pd
import matplotlib.pyplot as plt

# Filter data hanya untuk bulan Agustus dan status 'Cancelled'
cancelled_august_data = data2[(data2['Departure Month'] == 'August') & (data2['Flight Status'] == 'Cancelled')]

# Menghitung jumlah penerbangan yang di-cancel berdasarkan negara keberangkatan
cancelled_top_countries = cancelled_august_data['Country Name'].value_counts()

# Ambil 10 negara dengan jumlah penerbangan yang di-cancel tertinggi di bulan Agustus
top_cancelled_countries = cancelled_top_countries.head(10)

# Buat plot bar untuk 10 negara dengan jumlah penerbangan yang di-cancel tertinggi di bulan Agustus dengan warna merah
plt.figure(figsize=(10, 6))
bars = plt.bar(top_cancelled_countries.index, top_cancelled_countries.values, color='red')
plt.title('Top 10 Negara dengan Jumlah Penerbangan Dibatalkan di Bulan Agustus')
plt.xlabel('Negara Keberangkatan')
plt.ylabel('Jumlah Penerbangan Dibatalkan')
plt.xticks(rotation=45)
plt.tight_layout()

# Menambahkan label nilai di atas setiap bar
for bar in bars:
    yval = bar.get_height()
    plt.text(bar.get_x() + bar.get_width() / 2, yval, yval, ha='center', va='bottom')

plt.show()

# Filter data hanya untuk bulan Agustus dan status 'On Time'
ontime_august_data = data2[(data['Departure Month'] == 'August') & (data2['Flight Status'] == 'On Time')]

# Menghitung jumlah penerbangan yang di-on time berdasarkan negara keberangkatan
ontime_top_countries = ontime_august_data['Country Name'].value_counts()

# Menampilkan 10 negara dengan jumlah penerbangan yang di-on time tertinggi di bulan Agustus
top_ontime_countries = ontime_top_countries.head(10)
print(top_ontime_countries)

import pandas as pd
import matplotlib.pyplot as plt

# Filter data hanya untuk bulan Agustus dan status 'On Time'
on_time_august_data = data2[(data2['Departure Month'] == 'August') & (data2['Flight Status'] == 'On Time')]

# Menghitung jumlah penerbangan yang tepat waktu berdasarkan negara keberangkatan
on_time_top_countries = on_time_august_data['Country Name'].value_counts()

# Ambil 10 negara dengan jumlah penerbangan yang tepat waktu tertinggi di bulan Agustus
top_on_time_countries = on_time_top_countries.head(10)

# Buat plot bar untuk 10 negara dengan jumlah penerbangan yang tepat waktu tertinggi di bulan Agustus dengan warna hijau
plt.figure(figsize=(10, 6))
bars = plt.bar(top_on_time_countries.index, top_on_time_countries.values, color='green')
plt.title('Top 10 Negara dengan Jumlah Penerbangan Tepat Waktu di Bulan Agustus 2022')
plt.xlabel('Negara Keberangkatan')
plt.ylabel('Jumlah Penerbangan Tepat Waktu')
plt.xticks(rotation=45)
plt.tight_layout()

# Menambahkan label nilai di atas setiap bar
for bar in bars:
    yval = bar.get_height()
    plt.text(bar.get_x() + bar.get_width() / 2, yval, yval, ha='center', va='bottom')

plt.show()

# Filter data hanya untuk bulan Agustus dan status 'Delay'
delay_august_data = data2[(data2['Departure Month'] == 'January') & (data2['Flight Status'] == 'Delayed')]

# Menghitung jumlah penerbangan yang di-Delay berdasarkan negara keberangkatan
delay_top_countries = delay_august_data['Country Name'].value_counts()

# Menampilkan 10 negara dengan jumlah penerbangan yang di-Delay tertinggi di bulan Agustus
top_delay_countries = delay_top_countries.head(10)
print(top_delay_countries)

import pandas as pd
import matplotlib.pyplot as plt

# Filter data hanya untuk bulan Januari dan status 'Delayed'
delay_january_data = data2[(data2['Departure Month'] == 'January') & (data2['Flight Status'] == 'Delayed')]

# Menghitung jumlah penerbangan yang di-Delay berdasarkan negara keberangkatan
delay_top_countries = delay_january_data['Country Name'].value_counts()

# Ambil 10 negara dengan jumlah penerbangan yang di-Delay tertinggi di bulan Januari
top_delay_countries = delay_top_countries.head(10)

# Buat plot bar untuk 10 negara dengan jumlah penerbangan yang di-Delay tertinggi di bulan Januari dengan warna kuning
plt.figure(figsize=(10, 6))
bars = plt.bar(top_delay_countries.index, top_delay_countries.values, color='yellow')
plt.title('Top 10 Negara dengan Jumlah Penerbangan Delayed di Bulan Januari 2022')
plt.xlabel('Negara Keberangkatan')
plt.ylabel('Jumlah Penerbangan Delayed')
plt.xticks(rotation=45)
plt.tight_layout()

# Menambahkan label nilai di atas setiap bar
for bar in bars:
    yval = bar.get_height()
    plt.text(bar.get_x() + bar.get_width() / 2, yval, yval, ha='center', va='bottom')

plt.show()

"""Top Country Cancelled:
United States         615
Australia             187
Canada                145
Brazil                145
Papua New Guinea       99
China                  93
Indonesia              76
Russian Federation     58
France                 57
Colombia               44

Top Country On Time:
United States         643
Australia             199
Canada                156
Brazil                137
Papua New Guinea      123
China                  87
Indonesia              73
Russian Federation     66
France                 66
India                  54

Top Country Delayed:
United States         662
Australia             176
Brazil                151
Canada                149
Papua New Guinea      117
China                  78
Russian Federation     74
France                 70
Indonesia              64
United Kingdom         48

# Air Port
"""

# Filter data untuk penerbangan yang berasal dari United States
us_airports = data2[data2['Country Name'] == 'United States']

# Menghitung jumlah bandara unik di Amerika Serikat
total_us_airports = len(us_airports['Airport Name'].unique())
print("Total bandara di Amerika Serikat:", total_us_airports)

# Filter data untuk penerbangan yang berasal dari United States
us_airports = data2[data2['Country Name'] == 'Indonesia']

# Menghitung jumlah bandara unik di Amerika Serikat
total_us_airports = len(us_airports['Airport Name'].unique())
print("Total bandara di Indonesia:", total_us_airports)

# Filter data untuk penerbangan yang berasal dari United States, pada bulan Agustus 2022, dan status 'Cancelled'
print("Top5 List Bandara United State Status Cancelled/batal bulan agustus 2022")
cancelled_august_us = data2[
    (data2['Country Name'] == 'United States') &
    (data2['Departure Month'] == 'August') &
    (data2['Year'] == 2022) &
    (data2['Flight Status'] == 'Cancelled')
]

# Menghitung jumlah pembatalan penerbangan untuk setiap bandara
top_cancelled_airports_august_us = cancelled_august_us['Airport Name'].value_counts().head(5)

# Menampilkan jumlah pembatalan dan nama bandara
for idx, (airport, count) in enumerate(top_cancelled_airports_august_us.items(), start=1):
    print(f"{idx}. {airport}: {count} pembatalan")

import matplotlib.pyplot as plt

# Membuat visualisasi jumlah pembatalan penerbangan untuk setiap bandara
plt.figure(figsize=(10, 6))
bars = plt.bar(top_cancelled_airports_august_us.index, top_cancelled_airports_august_us.values, color='red')
plt.title('Top 5 Bandara dengan Jumlah Pembatalan di United States (Agustus 2022)')
plt.xlabel('Nama Bandara')
plt.ylabel('Jumlah Pembatalan')
plt.xticks(rotation=45, ha='right')  # Mengatur rotasi label dan posisi horizontal ke kanan
plt.tight_layout()

# Menambahkan label nilai di atas setiap bar
for bar, value in zip(bars, top_cancelled_airports_august_us.values):
    plt.text(bar.get_x() + bar.get_width() / 2, bar.get_height(), value, ha='center', va='bottom')

plt.show()

# Filter data untuk penerbangan yang berasal dari United States, pada bulan Agustus 2022, dan status 'Cancelled'
print("Top5 List Bandara Indonesia Cancelled/batal bulan agustus 2022")
cancelled_august_in = data2[
    (data2['Country Name'] == 'Indonesia') &
    (data2['Departure Month'] == 'August') &
    (data2['Year'] == 2022) &
    (data2['Flight Status'] == 'Cancelled')
]

# Menghitung jumlah pembatalan penerbangan untuk setiap bandara
top_cancelled_airports_august_in = cancelled_august_in['Airport Name'].value_counts().head(5)

# Menampilkan jumlah pembatalan dan nama bandara
for idx, (airport, count) in enumerate(top_cancelled_airports_august_in.items(), start=1):
    print(f"{idx}. {airport}: {count} pembatalan")

import matplotlib.pyplot as plt

# Membuat visualisasi jumlah pembatalan penerbangan untuk setiap bandara
plt.figure(figsize=(10, 6))
bars = plt.bar(top_cancelled_airports_august_in.index, top_cancelled_airports_august_in.values, color='red')
plt.title('Top 5 Bandara dengan Jumlah Pembatalan di Indonesia (Agustus 2022)')
plt.xlabel('Nama Bandara')
plt.ylabel('Jumlah Pembatalan')
plt.xticks(rotation=45, ha='right')  # Mengatur rotasi label dan posisi horizontal ke kanan
plt.tight_layout()

# Menambahkan label nilai di atas setiap bar
for bar, value in zip(bars, top_cancelled_airports_august_in.values):
    plt.text(bar.get_x() + bar.get_width() / 2, bar.get_height(), value, ha='center', va='bottom')

plt.show()

# Filter data untuk penerbangan yang berasal dari United States, pada bulan Agustus 2022, dan status 'Delay'
delay_jan_us = data2[
    (data2['Country Name'] == 'United States') &
    (data2['Departure Month'] == 'January') &
    (data2['Year'] == 2022) &
    (data2['Flight Status'] == 'Delayed')
]

# Menghitung jumlah delay penerbangan untuk setiap bandara
top_delayed_airports_jan_us = delay_jan_us['Airport Name'].value_counts().head(5)

# Menampilkan jumlah delay dan nama bandara
print("Top 5 List Bandara United State Status Delay/batal bulan agustus 2022")
for idx, (airport, count) in enumerate(top_delayed_airports_jan_us.items(), start=1):
    print(f"{idx}. {airport}: {count} delay")

import matplotlib.pyplot as plt

# Filter data untuk penerbangan yang berasal dari United States, pada bulan Agustus 2022, dan status 'Delayed'
delay_jan_us = data2[
    (data2['Country Name'] == 'United States') &
    (data2['Departure Month'] == 'January') &
    (data2['Year'] == 2022) &
    (data2['Flight Status'] == 'Delayed')
]

# Menghitung jumlah delay penerbangan untuk setiap bandara
top_delayed_airports_jan_us = delay_jan_us['Airport Name'].value_counts().head(5)

# Membuat plot untuk top 5 bandara dengan jumlah penerbangan yang tertunda
plt.figure(figsize=(10, 6))
bars = plt.bar(top_delayed_airports_jan_us.index, top_delayed_airports_jan_us.values, color='yellow')
plt.title('Top 5 Bandara dengan Jumlah Penerbangan Tertunda di United States (Agustus 2022)')
plt.xlabel('Nama Bandara')
plt.ylabel('Jumlah Penerbangan Tertunda')
plt.xticks(rotation=45, ha='right')

# Menambahkan label nilai di atas setiap bar
for bar in bars:
    yval = bar.get_height()
    plt.text(bar.get_x() + bar.get_width() / 2, yval, yval, ha='center', va='bottom')

plt.tight_layout()
plt.show()

# Filter data untuk penerbangan yang berasal dari United States, pada bulan Agustus 2022, dan status 'Delay'
delay_jan_in = data2[
    (data2['Country Name'] == 'Indonesia') &
    (data2['Departure Month'] == 'January') &
    (data2['Year'] == 2022) &
    (data2['Flight Status'] == 'Delayed')
]

# Menghitung jumlah delay penerbangan untuk setiap bandara
top_delayed_airports_jan_in = delay_jan_in['Airport Name'].value_counts().head(5)

# Menampilkan jumlah delay dan nama bandara
print("Top 5 List Bandara Indonesia Status Delay/batal bulan agustus 2022")
for idx, (airport, count) in enumerate(top_delayed_airports_jan_in.items(), start=1):
    print(f"{idx}. {airport}: {count} delay")

import matplotlib.pyplot as plt

# Filter data untuk penerbangan yang berasal dari Indonesia, pada bulan Januari 2022, dan status 'Delay'
delay_jan_in = data2[
    (data2['Country Name'] == 'Indonesia') &
    (data2['Departure Month'] == 'January') &
    (data2['Year'] == 2022) &
    (data2['Flight Status'] == 'Delayed')
]

# Menghitung jumlah delay penerbangan untuk setiap bandara
top_delayed_airports_jan_in = delay_jan_in['Airport Name'].value_counts().head(5)

# Membuat plot untuk top 5 bandara dengan jumlah penerbangan yang tertunda
plt.figure(figsize=(10, 6))
bars = plt.bar(top_delayed_airports_jan_in.index, top_delayed_airports_jan_in.values, color='yellow')
plt.title('Top 5 Bandara dengan Jumlah Penerbangan Tertunda di Indonesia (Januari 2022)')
plt.xlabel('Nama Bandara')
plt.ylabel('Jumlah Penerbangan Tertunda')
plt.xticks(rotation=45, ha='right')

# Menambahkan label nilai di atas setiap bar
for bar in bars:
    yval = bar.get_height()
    plt.text(bar.get_x() + bar.get_width() / 2, yval, yval, ha='center', va='bottom')

plt.tight_layout()
plt.show()

# Filter data untuk penerbangan yang berasal dari United States, pada bulan Agustus 2022, dan status 'On Time'
on_time_august_us = data2[
    (data2['Country Name'] == 'United States') &
    (data2['Departure Month'] == 'August') &
    (data2['Year'] == 2022) &
    (data2['Flight Status'] == 'On Time')
]

# Menghitung jumlah penerbangan on time untuk setiap bandara
top_on_time_airports_august_us = on_time_august_us['Airport Name'].value_counts().head(5)

# Menampilkan jumlah penerbangan on time dan nama bandara
print("Top 5 List Bandara United States dengan Status On Time bulan Agustus 2022")
for idx, (airport, count) in enumerate(top_on_time_airports_august_us.items(), start=1):
    print(f"{idx}. {airport}: {count} On Time")

import matplotlib.pyplot as plt

# Data top 5 bandara dengan jumlah penerbangan on time
airports = top_on_time_airports_august_us.index
counts = top_on_time_airports_august_us.values

# Memvisualisasikan jumlah penerbangan on time untuk setiap bandara
plt.figure(figsize=(10, 6))
bars = plt.bar(airports, counts, color='green')

# Menambahkan label angka di atas setiap bar
for bar, count in zip(bars, counts):
    plt.text(bar.get_x() + bar.get_width() / 2, bar.get_height(), count,
             ha='center', va='bottom', fontsize=9)

plt.title('Top 5 Bandara di United States dengan Jumlah Penerbangan On Time (Agustus 2022)')
plt.xlabel('Nama Bandara')
plt.ylabel('Jumlah Penerbangan On Time')
plt.xticks(rotation=45, ha='right')
plt.tight_layout()
plt.show()

# Filter data untuk penerbangan yang berasal dari Indonesia, pada bulan Agustus 2022, dan status 'On Time'
on_time_august_id = data2[
    (data2['Country Name'] == 'Indonesia') &
    (data2['Departure Month'] == 'August') &
    (data2['Year'] == 2022) &
    (data2['Flight Status'] == 'On Time')
]

# Menghitung jumlah penerbangan on time untuk setiap bandara
top_on_time_airports_august_id = on_time_august_id['Airport Name'].value_counts().head(5)

# Menampilkan jumlah penerbangan on time dan nama bandara
print("Top 5 List Bandara Indonesia dengan Status On Time bulan Agustus 2022")
for idx, (airport, count) in enumerate(top_on_time_airports_august_id.items(), start=1):
    print(f"{idx}. {airport}: {count} On Time")

import matplotlib.pyplot as plt

# Data top 5 bandara dengan jumlah penerbangan on time
airports = top_on_time_airports_august_id.index
counts = top_on_time_airports_august_id.values

# Memvisualisasikan jumlah penerbangan on time untuk setiap bandara
plt.figure(figsize=(10, 6))
bars = plt.bar(airports, counts, color='green')

# Menambahkan label angka di atas setiap bar
for bar, count in zip(bars, counts):
    plt.text(bar.get_x() + bar.get_width() / 2, bar.get_height(), count,
             ha='center', va='bottom', fontsize=9)

plt.title('Top 5 Bandara di Indonesia dengan Jumlah Penerbangan On Time (Agustus 2022)')
plt.xlabel('Nama Bandara')
plt.ylabel('Jumlah Penerbangan On Time')
plt.xticks(rotation=45, ha='right')
plt.tight_layout()
plt.show()

"""# Country Status"""

# Menghitung jumlah total penerbangan untuk setiap negara
total_flights_per_country = data2['Country Name'].value_counts()
# Mengambil top 3 negara dengan jumlah total penerbangan tertinggi
top_5_countries = total_flights_per_country.head(5)
print(top_5_countries)

import matplotlib.pyplot as plt

# Mengambil top 5 negara dengan jumlah total penerbangan tertinggi
top_5_countries = total_flights_per_country.head(5)

# Membuat pie chart untuk top 5 negara
plt.figure(figsize=(9, 7))
plt.pie(top_5_countries, labels=top_5_countries.index, autopct='%1.1f%%', startangle=140)
plt.title('Persentase Jumlah Total Penerbangan untuk Top 5 Negara')
plt.axis('equal')  # Membuat lingkaran menjadi proporsional
plt.show()

import pandas as pd
import matplotlib.pyplot as plt

# Ganti 'selected_country' dengan negara yang ingin Anda analisis
selected_country = 'United States'  # Ganti dengan negara yang ingin Anda analisis

# Filter data untuk negara yang dipilih dan tahun 2022
data_selected_country_2022 = data2[(data2['Country Name'] == selected_country) & (data2['Year'] == 2022)]

# Menghitung jumlah penerbangan yang dibatalkan, 'On Time', dan 'Delayed' untuk setiap bulan
cancelled_counts = data_selected_country_2022[data_selected_country_2022['Flight Status'] == 'Cancelled'].groupby('Departure Month').size()
on_time_counts = data_selected_country_2022[data_selected_country_2022['Flight Status'] == 'On Time'].groupby('Departure Month').size()
delayed_counts = data_selected_country_2022[data_selected_country_2022['Flight Status'] == 'Delayed'].groupby('Departure Month').size()

# Mengurutkan bulan secara urut
ordered_months = [
    'January', 'February', 'March', 'April', 'May', 'June',
    'July', 'August', 'September', 'October', 'November', 'December'
]

# Menggabungkan jumlah penerbangan untuk setiap status per bulan menjadi satu DataFrame
flight_counts = pd.DataFrame({
    'Cancelled': cancelled_counts.reindex(ordered_months, fill_value=0),
    'On Time': on_time_counts.reindex(ordered_months, fill_value=0),
    'Delayed': delayed_counts.reindex(ordered_months, fill_value=0)
})

# Plotting perbandingan jumlah penerbangan untuk setiap status per bulan
ax = flight_counts.plot(kind='bar', figsize=(25, 17), width=0.6, color=['red', 'green', 'yellow'])
plt.title(f'Perbandingan Jumlah Penerbangan di {selected_country} selama 2022 berdasarkan Status')
plt.xlabel('Bulan')
plt.ylabel('Jumlah Penerbangan')
plt.xticks(rotation=45)
plt.legend(title='Status Penerbangan')
plt.tight_layout()

# Menambahkan label angka persentase di atas setiap batang
for p in ax.patches:
    width = p.get_width()
    height = p.get_height()
    x, y = p.get_xy()
    ax.annotate(f'{int(height)}', (x + width/2, y + height), ha='center', va='center', xytext=(0, 5), textcoords='offset points')

plt.show()

import pandas as pd
import matplotlib.pyplot as plt

# Ganti 'selected_country' dengan negara yang ingin Anda analisis
selected_country = 'Australia'  # Ganti dengan negara yang ingin Anda analisis

# Filter data untuk negara yang dipilih dan tahun 2022
data_selected_country_2022 = data2[(data2['Country Name'] == selected_country) & (data2['Year'] == 2022)]

# Menghitung jumlah penerbangan yang dibatalkan, 'On Time', dan 'Delayed' untuk setiap bulan
cancelled_counts = data_selected_country_2022[data_selected_country_2022['Flight Status'] == 'Cancelled'].groupby('Departure Month').size()
on_time_counts = data_selected_country_2022[data_selected_country_2022['Flight Status'] == 'On Time'].groupby('Departure Month').size()
delayed_counts = data_selected_country_2022[data_selected_country_2022['Flight Status'] == 'Delayed'].groupby('Departure Month').size()

# Mengurutkan bulan secara urut
ordered_months = [
    'January', 'February', 'March', 'April', 'May', 'June',
    'July', 'August', 'September', 'October', 'November', 'December'
]

# Menggabungkan jumlah penerbangan untuk setiap status per bulan menjadi satu DataFrame
flight_counts = pd.DataFrame({
    'Cancelled': cancelled_counts.reindex(ordered_months, fill_value=0),
    'On Time': on_time_counts.reindex(ordered_months, fill_value=0),
    'Delayed': delayed_counts.reindex(ordered_months, fill_value=0)
})

# Plotting perbandingan jumlah penerbangan untuk setiap status per bulan
ax = flight_counts.plot(kind='bar', figsize=(25, 10), width=0.6, color=['red', 'green', 'yellow'])
plt.title(f'Perbandingan Jumlah Penerbangan di {selected_country} selama 2022 berdasarkan Status')
plt.xlabel('Bulan')
plt.ylabel('Jumlah Penerbangan')
plt.xticks(rotation=45)
plt.legend(title='Status Penerbangan')
plt.tight_layout()

# Menambahkan label angka persentase di atas setiap batang
for p in ax.patches:
    width = p.get_width()
    height = p.get_height()
    x, y = p.get_xy()
    ax.annotate(f'{int(height)}', (x + width/2, y + height), ha='center', va='center', xytext=(0, 5), textcoords='offset points')

plt.show()

import pandas as pd
import matplotlib.pyplot as plt

# Ganti 'selected_country' dengan negara yang ingin Anda analisis
selected_country = 'Canada'  # Ganti dengan negara yang ingin Anda analisis

# Filter data untuk negara yang dipilih dan tahun 2022
data_selected_country_2022 = data2[(data2['Country Name'] == selected_country) & (data2['Year'] == 2022)]

# Menghitung jumlah penerbangan yang dibatalkan, 'On Time', dan 'Delayed' untuk setiap bulan
cancelled_counts = data_selected_country_2022[data_selected_country_2022['Flight Status'] == 'Cancelled'].groupby('Departure Month').size()
on_time_counts = data_selected_country_2022[data_selected_country_2022['Flight Status'] == 'On Time'].groupby('Departure Month').size()
delayed_counts = data_selected_country_2022[data_selected_country_2022['Flight Status'] == 'Delayed'].groupby('Departure Month').size()

# Mengurutkan bulan secara urut
ordered_months = [
    'January', 'February', 'March', 'April', 'May', 'June',
    'July', 'August', 'September', 'October', 'November', 'December'
]

# Menggabungkan jumlah penerbangan untuk setiap status per bulan menjadi satu DataFrame
flight_counts = pd.DataFrame({
    'Cancelled': cancelled_counts.reindex(ordered_months, fill_value=0),
    'On Time': on_time_counts.reindex(ordered_months, fill_value=0),
    'Delayed': delayed_counts.reindex(ordered_months, fill_value=0)
})

# Plotting perbandingan jumlah penerbangan untuk setiap status per bulan
ax = flight_counts.plot(kind='bar', figsize=(25, 10), width=0.6, color=['red', 'green', 'yellow'])
plt.title(f'Perbandingan Jumlah Penerbangan di {selected_country} selama 2022 berdasarkan Status')
plt.xlabel('Bulan')
plt.ylabel('Jumlah Penerbangan')
plt.xticks(rotation=45)
plt.legend(title='Status Penerbangan')
plt.tight_layout()

# Menambahkan label angka persentase di atas setiap batang
for p in ax.patches:
    width = p.get_width()
    height = p.get_height()
    x, y = p.get_xy()
    ax.annotate(f'{int(height)}', (x + width/2, y + height), ha='center', va='center', xytext=(0, 5), textcoords='offset points')

plt.show()

import pandas as pd
import matplotlib.pyplot as plt

# Ganti 'selected_country' dengan negara yang ingin Anda analisis
selected_country = 'Brazil'  # Ganti dengan negara yang ingin Anda analisis

# Filter data untuk negara yang dipilih dan tahun 2022
data_selected_country_2022 = data2[(data2['Country Name'] == selected_country) & (data2['Year'] == 2022)]

# Menghitung jumlah penerbangan yang dibatalkan, 'On Time', dan 'Delayed' untuk setiap bulan
cancelled_counts = data_selected_country_2022[data_selected_country_2022['Flight Status'] == 'Cancelled'].groupby('Departure Month').size()
on_time_counts = data_selected_country_2022[data_selected_country_2022['Flight Status'] == 'On Time'].groupby('Departure Month').size()
delayed_counts = data_selected_country_2022[data_selected_country_2022['Flight Status'] == 'Delayed'].groupby('Departure Month').size()

# Mengurutkan bulan secara urut
ordered_months = [
    'January', 'February', 'March', 'April', 'May', 'June',
    'July', 'August', 'September', 'October', 'November', 'December'
]

# Menggabungkan jumlah penerbangan untuk setiap status per bulan menjadi satu DataFrame
flight_counts = pd.DataFrame({
    'Cancelled': cancelled_counts.reindex(ordered_months, fill_value=0),
    'On Time': on_time_counts.reindex(ordered_months, fill_value=0),
    'Delayed': delayed_counts.reindex(ordered_months, fill_value=0)
})

# Plotting perbandingan jumlah penerbangan untuk setiap status per bulan
ax = flight_counts.plot(kind='bar', figsize=(25, 15), width=0.6, color=['red', 'green', 'yellow'])
plt.title(f'Perbandingan Jumlah Penerbangan di {selected_country} selama 2022 berdasarkan Status')
plt.xlabel('Bulan')
plt.ylabel('Jumlah Penerbangan')
plt.xticks(rotation=45)
plt.legend(title='Status Penerbangan')
plt.tight_layout()

# Menambahkan label angka persentase di atas setiap batang
for p in ax.patches:
    width = p.get_width()
    height = p.get_height()
    x, y = p.get_xy()
    ax.annotate(f'{int(height)}', (x + width/2, y + height), ha='center', va='center', xytext=(0, 5), textcoords='offset points')

plt.show()

import pandas as pd
import matplotlib.pyplot as plt

# Ganti 'selected_country' dengan negara yang ingin Anda analisis
selected_country = 'Papua New Guinea'  # Ganti dengan negara yang ingin Anda analisis

# Filter data untuk negara yang dipilih dan tahun 2022
data_selected_country_2022 = data2[(data2['Country Name'] == selected_country) & (data2['Year'] == 2022)]

# Menghitung jumlah penerbangan yang dibatalkan, 'On Time', dan 'Delayed' untuk setiap bulan
cancelled_counts = data_selected_country_2022[data_selected_country_2022['Flight Status'] == 'Cancelled'].groupby('Departure Month').size()
on_time_counts = data_selected_country_2022[data_selected_country_2022['Flight Status'] == 'On Time'].groupby('Departure Month').size()
delayed_counts = data_selected_country_2022[data_selected_country_2022['Flight Status'] == 'Delayed'].groupby('Departure Month').size()

# Mengurutkan bulan secara urut
ordered_months = [
    'January', 'February', 'March', 'April', 'May', 'June',
    'July', 'August', 'September', 'October', 'November', 'December'
]

# Menggabungkan jumlah penerbangan untuk setiap status per bulan menjadi satu DataFrame
flight_counts = pd.DataFrame({
    'Cancelled': cancelled_counts.reindex(ordered_months, fill_value=0),
    'On Time': on_time_counts.reindex(ordered_months, fill_value=0),
    'Delayed': delayed_counts.reindex(ordered_months, fill_value=0)
})

# Plotting perbandingan jumlah penerbangan untuk setiap status per bulan
ax = flight_counts.plot(kind='bar', figsize=(25, 15), width=0.6, color=['red', 'green', 'yellow'])
plt.title(f'Perbandingan Jumlah Penerbangan di {selected_country} selama 2022 berdasarkan Status')
plt.xlabel('Bulan')
plt.ylabel('Jumlah Penerbangan')
plt.xticks(rotation=45)
plt.legend(title='Status Penerbangan')
plt.tight_layout()

# Menambahkan label angka persentase di atas setiap batang
for p in ax.patches:
    width = p.get_width()
    height = p.get_height()
    x, y = p.get_xy()
    ax.annotate(f'{int(height)}', (x + width/2, y + height), ha='center', va='center', xytext=(0, 5), textcoords='offset points')

plt.show()

"""# Used plane Indonesia"""

import pandas as pd

# Filter data untuk penerbangan ke wilayah Indonesia
flights_to_indonesia = data2[data2['Country Name'] == 'Indonesia']

# Menghitung jumlah penumpang untuk setiap status penerbangan
passengers_on_time = flights_to_indonesia[flights_to_indonesia['Flight Status'] == 'On Time']['Passenger ID'].count()
passengers_delayed = flights_to_indonesia[flights_to_indonesia['Flight Status'] == 'Delayed']['Passenger ID'].count()
passengers_cancelled = flights_to_indonesia[flights_to_indonesia['Flight Status'] == 'Cancelled']['Passenger ID'].count()

# Menghitung total penumpang untuk semua status penerbangan di wilayah Indonesia
total_passengers_indonesia_2022 = flights_to_indonesia['Passenger ID'].count()

print("Total Penumpang di wilayah Indonesia selama tahun 2022:", total_passengers_indonesia_2022)
print("Jumlah Penumpang dengan Status 'On Time' di wilayah Indonesia:", passengers_on_time)
print("Jumlah Penumpang dengan Status 'Delayed' di wilayah Indonesia:", passengers_delayed)
print("Jumlah Penumpang dengan Status 'Cancelled' di wilayah Indonesia:", passengers_cancelled)

import matplotlib.pyplot as plt

# Data untuk plot
statuses = ['On Time', 'Delayed', 'Cancelled']
passenger_counts = [passengers_on_time, passengers_delayed, passengers_cancelled]

# Membuat bar plot
plt.figure(figsize=(8, 6))
bars = plt.bar(statuses, passenger_counts, color=['green', 'yellow', 'red'])
plt.title('Jumlah Penumpang berdasarkan Status Penerbangan di Indonesia (2022)')
plt.xlabel('Status Penerbangan')
plt.ylabel('Jumlah Penumpang')

# Menambahkan label angka di atas setiap batang
for bar in bars:
    yval = bar.get_height()
    plt.text(bar.get_x() + bar.get_width()/2, yval, int(yval), va='bottom', ha='center')

plt.show()

import matplotlib.pyplot as plt

# Data untuk pie chart
statuses = ['On Time', 'Delayed', 'Cancelled']
passenger_counts = [passengers_on_time, passengers_delayed, passengers_cancelled]

# Membuat pie chart
plt.figure(figsize=(8, 6))
plt.pie(passenger_counts, labels=statuses, autopct='%1.1f%%', colors=['green', 'yellow', 'red'])

# Menambahkan title
plt.title('Perbandingan Jumlah Penumpang berdasarkan Status Penerbangan di Indonesia (2022)')

plt.show()

import pandas as pd
import matplotlib.pyplot as plt

# Ganti 'selected_country' dengan negara yang ingin Anda analisis
selected_country = 'Indonesia'  # Ganti dengan negara yang ingin Anda analisis

# Filter data untuk negara yang dipilih dan tahun 2022
data_selected_country_2022 = data2[(data2['Country Name'] == selected_country) & (data2['Year'] == 2022)]

# Menghitung jumlah penerbangan yang dibatalkan, 'On Time', dan 'Delayed' untuk setiap bulan
cancelled_counts = data_selected_country_2022[data_selected_country_2022['Flight Status'] == 'Cancelled'].groupby('Departure Month').size()
on_time_counts = data_selected_country_2022[data_selected_country_2022['Flight Status'] == 'On Time'].groupby('Departure Month').size()
delayed_counts = data_selected_country_2022[data_selected_country_2022['Flight Status'] == 'Delayed'].groupby('Departure Month').size()

# Mengurutkan bulan secara urut
ordered_months = [
    'January', 'February', 'March', 'April', 'May', 'June',
    'July', 'August', 'September', 'October', 'November', 'December'
]

# Menggabungkan jumlah penerbangan untuk setiap status per bulan menjadi satu DataFrame
flight_counts = pd.DataFrame({
    'Cancelled': cancelled_counts.reindex(ordered_months, fill_value=0),
    'On Time': on_time_counts.reindex(ordered_months, fill_value=0),
    'Delayed': delayed_counts.reindex(ordered_months, fill_value=0)
})

# Plotting perbandingan jumlah penerbangan untuk setiap status per bulan
ax = flight_counts.plot(kind='bar', figsize=(20, 6), width=0.7, color=['red', 'green', 'yellow'])
plt.title(f'Perbandingan Jumlah Penerbangan di {selected_country} selama 2022 berdasarkan Status')
plt.xlabel('Bulan')
plt.ylabel('Jumlah Penerbangan')
plt.xticks(rotation=45)
plt.legend(title='Status Penerbangan')
plt.tight_layout()

# Menambahkan label angka persentase di atas setiap batang
for p in ax.patches:
    width = p.get_width()
    height = p.get_height()
    x, y = p.get_xy()
    ax.annotate(f'{int(height)}', (x + width/2, y + height), ha='center', va='center', xytext=(0, 5), textcoords='offset points')

plt.show()

# Filter data untuk status 'Cancelled' ke negara Indonesia
cancelled_data_indonesia = data2[(data2['Flight Status'] == 'Cancelled') & (data2['Country Name'] == 'Indonesia')]

# Menghitung jumlah status 'Cancelled' per bulan
cancelled_per_month_indonesia = cancelled_data_indonesia.groupby('Departure Month').size()

# Urutan bulan
ordered_months = [
    'January', 'February', 'March', 'April', 'May', 'June',
    'July', 'August', 'September', 'October', 'November', 'December'
]

# Mengatur ulang indeks berdasarkan urutan bulan yang diinginkan
cancelled_per_month_indonesia = cancelled_per_month_indonesia.reindex(ordered_months)

# Membuat plot garis untuk jumlah status 'Cancelled' per bulan
plt.figure(figsize=(25, 10))
cancelled_per_month_indonesia.plot(marker='o', color='red', linestyle='-', linewidth=2)
plt.title('Jumlah Status Penerbangan Dibatalkan per Bulan ke Indonesia (2022)')
plt.xlabel('Bulan')
plt.ylabel('Jumlah Penerbangan Dibatalkan')
plt.xticks(range(len(ordered_months)), ordered_months, rotation=45)
plt.grid(True)

# Menambahkan label angka detail pada setiap titik
for i, value in enumerate(cancelled_per_month_indonesia):
    plt.text(i, value + 1, str(value), ha='center', va='bottom', fontsize=10, color='black')

plt.tight_layout()
plt.show()

# Filter data untuk status 'On Time' ke negara Indonesia
on_time_data_indonesia = data2[(data2['Flight Status'] == 'On Time') & (data2['Country Name'] == 'Indonesia')]

# Menghitung jumlah status 'On Time' per bulan
on_time_per_month_indonesia = on_time_data_indonesia.groupby('Departure Month').size()

# Urutan bulan
ordered_months = [
    'January', 'February', 'March', 'April', 'May', 'June',
    'July', 'August', 'September', 'October', 'November', 'December'
]

# Mengatur ulang indeks berdasarkan urutan bulan yang diinginkan
on_time_per_month_indonesia = on_time_per_month_indonesia.reindex(ordered_months)

# Membuat plot garis untuk jumlah status 'On Time' per bulan
plt.figure(figsize=(25, 15))
on_time_per_month_indonesia.plot(marker='o', color='green', linestyle='-', linewidth=2)
plt.title('Jumlah Status Penerbangan On Time per Bulan ke Indonesia (2022)')
plt.xlabel('Bulan')
plt.ylabel('Jumlah Penerbangan On Time')
plt.xticks(range(len(ordered_months)), ordered_months, rotation=45)
plt.grid(True)

# Menambahkan label angka detail pada setiap titik
for i, value in enumerate(on_time_per_month_indonesia):
    plt.text(i, value + 1, str(value), ha='center', va='bottom', fontsize=10, color='black')

plt.tight_layout()
plt.show()

# Filter data untuk status 'Delayed' ke negara Indonesia
delayed_data_indonesia = data2[(data2['Flight Status'] == 'Delayed') & (data2['Country Name'] == 'Indonesia')]

# Menghitung jumlah status 'Delayed' per bulan
delayed_per_month_indonesia = delayed_data_indonesia.groupby('Departure Month').size()

# Urutan bulan
ordered_months = [
    'January', 'February', 'March', 'April', 'May', 'June',
    'July', 'August', 'September', 'October', 'November', 'December'
]

# Mengatur ulang indeks berdasarkan urutan bulan yang diinginkan
delayed_per_month_indonesia = delayed_per_month_indonesia.reindex(ordered_months)

# Membuat plot garis untuk jumlah status 'Delayed' per bulan
plt.figure(figsize=(25, 15))
delayed_per_month_indonesia.plot(marker='o', color='yellow', linestyle='-', linewidth=2)
plt.title('Jumlah Status Penerbangan Delayed per Bulan ke Indonesia (2022)')
plt.xlabel('Bulan')
plt.ylabel('Jumlah Penerbangan Delayed')
plt.xticks(range(len(ordered_months)), ordered_months, rotation=45)
plt.grid(True)

# Menambahkan label angka detail pada setiap titik
for i, value in enumerate(delayed_per_month_indonesia):
    plt.text(i, value + 1, str(value), ha='center', va='bottom', fontsize=10, color='black')

plt.tight_layout()
plt.show()

# Filter data untuk penerbangan ke Indonesia pada bulan Mei yang memiliki status 'Cancelled'
cancelled_may_data_indonesia = data2[
    (data2['Country Name'] == 'Indonesia') &
    (data2['Departure Month'] == 'May') &
    (data2['Flight Status'] == 'Cancelled')
]

# Menghitung jumlah penerbangan yang dibatalkan berdasarkan nama bandara
cancelled_top_airports_may_indonesia = cancelled_may_data_indonesia['Airport Name'].value_counts().head(5)

# Membuat visualisasi jumlah pembatalan penerbangan untuk Indonesia pada bulan Mei
plt.figure(figsize=(10, 6))
bars = plt.bar(cancelled_top_airports_may_indonesia.index, cancelled_top_airports_may_indonesia.values, color='red')
plt.title('Top 5 Bandara di Indonesia dengan Jumlah Pembatalan (Mei)')
plt.xlabel('Nama Bandara')
plt.ylabel('Jumlah Pembatalan')
plt.xticks(rotation=45, ha='right')  # Mengatur rotasi label dan posisi horizontal ke kanan
plt.tight_layout()

# Menambahkan label nilai di atas setiap bar
for bar, value in zip(bars, cancelled_top_airports_may_indonesia.values):
    plt.text(bar.get_x() + bar.get_width() / 2, bar.get_height(), value, ha='center', va='bottom')

plt.show()

# Filter data untuk penerbangan ke Indonesia pada bulan Juli yang memiliki status 'On Time'
on_time_july_data_indonesia = data2[
    (data2['Country Name'] == 'Indonesia') &
    (data2['Departure Month'] == 'July') &
    (data2['Flight Status'] == 'On Time')
]

# Menghitung jumlah penerbangan yang tepat waktu berdasarkan nama bandara
on_time_top_airports_july_indonesia = on_time_july_data_indonesia['Airport Name'].value_counts().head(5)

# Membuat visualisasi jumlah penerbangan yang tepat waktu untuk Indonesia pada bulan Juli
plt.figure(figsize=(10, 6))
bars = plt.bar(on_time_top_airports_july_indonesia.index, on_time_top_airports_july_indonesia.values, color='green')
plt.title('Top 5 Bandara di Indonesia dengan Jumlah Penerbangan Tepat Waktu (Juli)')
plt.xlabel('Nama Bandara')
plt.ylabel('Jumlah Penerbangan Tepat Waktu')
plt.xticks(rotation=45, ha='right')  # Mengatur rotasi label dan posisi horizontal ke kanan
plt.tight_layout()

# Menambahkan label nilai di atas setiap bar
for bar, value in zip(bars, on_time_top_airports_july_indonesia.values):
    plt.text(bar.get_x() + bar.get_width() / 2, bar.get_height(), value, ha='center', va='bottom')

plt.show()

# Filter data untuk penerbangan ke Indonesia pada bulan Maret yang memiliki status 'Delayed'
delayed_march_data_indonesia = data2[
    (data2['Country Name'] == 'Indonesia') &
    (data2['Departure Month'] == 'March') &
    (data2['Flight Status'] == 'Delayed')
]

# Menghitung jumlah penerbangan yang tertunda berdasarkan nama bandara
delayed_top_airports_march_indonesia = delayed_march_data_indonesia['Airport Name'].value_counts().head(5)

# Membuat visualisasi jumlah penerbangan yang tertunda untuk Indonesia pada bulan Maret
plt.figure(figsize=(10, 6))
bars = plt.bar(delayed_top_airports_march_indonesia.index, delayed_top_airports_march_indonesia.values, color='yellow')
plt.title('Top 5 Bandara di Indonesia dengan Jumlah Keterlambatan (Maret)')
plt.xlabel('Nama Bandara')
plt.ylabel('Jumlah Keterlambatan')
plt.xticks(rotation=45, ha='right')  # Mengatur rotasi label dan posisi horizontal ke kanan
plt.tight_layout()

# Menambahkan label nilai di atas setiap bar
for bar, value in zip(bars, delayed_top_airports_march_indonesia.values):
    plt.text(bar.get_x() + bar.get_width() / 2, bar.get_height(), value, ha='center', va='bottom')

plt.show()

import pandas as pd

# Filter data untuk penerbangan ke wilayah Indonesia pada tahun 2022
flights_to_indonesia = data2[(data2['Country Name'] == 'Indonesia') & (data2['Year'] == 2022)]

# Menghitung jumlah penumpang berdasarkan jenis kelamin
passengers_by_gender = flights_to_indonesia.groupby('Gender')['Passenger ID'].count()
print("Jumlah Penumpang berdasarkan Jenis Kelamin di wilayah Indonesia selama tahun 2022:")
print(passengers_by_gender)

import matplotlib.pyplot as plt

# Filter data untuk penerbangan ke wilayah Indonesia pada tahun 2022
flights_to_indonesia = data2[(data2['Country Name'] == 'Indonesia') & (data2['Year'] == 2022)]

# Menghitung jumlah penumpang berdasarkan jenis kelamin
passengers_by_gender = flights_to_indonesia.groupby('Gender')['Passenger ID'].count()

# Membuat pie chart
plt.figure(figsize=(8, 6))
plt.pie(passengers_by_gender, labels=passengers_by_gender.index, autopct='%1.1f%%', colors=['skyblue', 'lightgreen'])
plt.title('Persentase Jumlah Penumpang berdasarkan Jenis Kelamin di Indonesia (2022)')
plt.axis('equal')  # Memastikan pie chart berbentuk lingkaran
plt.show()

# Menampilkan nilai unik dari kolom umur (Age)
unique_ages = data['Age'].unique()
print("Nilai unik dari kolom umur (Age):")
print(unique_ages)

# Filter data untuk penerbangan ke wilayah Indonesia dengan jenis kelamin Male pada tahun 2022
male_passengers_indonesia_2022 = data2[(data2['Country Name'] == 'Indonesia') & (data2['Year'] == 2022) & (data2['Gender'] == 'Male')]

# Mendapatkan nilai umur penumpang pria unik dan diurutkan
male_passengers_age_sorted = male_passengers_indonesia_2022['Age'].unique()
male_passengers_age_sorted.sort()

print("Umur dari penumpang jenis kelamin pria di wilayah Indonesia (2022) yang diurutkan:")
print(male_passengers_age_sorted)

# Filter data untuk penerbangan ke wilayah Indonesia dengan jenis kelamin Male pada tahun 2022
female_passengers_indonesia_2022 = data2[(data2['Country Name'] == 'Indonesia') & (data2['Year'] == 2022) & (data2['Gender'] == 'Female')]

# Mendapatkan nilai umur penumpang pria unik dan diurutkan
female_passengers_age_sorted = female_passengers_indonesia_2022['Age'].unique()
female_passengers_age_sorted.sort()

print("Umur dari penumpang jenis kelamin perempuan di wilayah Indonesia (2022) yang diurutkan:")
print(female_passengers_age_sorted)